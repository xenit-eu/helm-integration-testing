package com.contentgrid.junit.jupiter.helm;

import static org.assertj.core.api.Assertions.assertThat;

import com.contentgrid.helm.Helm;
import com.contentgrid.junit.jupiter.k8s.KubernetesTestCluster;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;

@KubernetesTestCluster
@HelmClient
class HelmChartHandleTest {

    static Helm helm;

    @ParameterizedTest
    @CsvSource({
            "classpath:fixtures/empty", // Reference to resources on our classpath. Because Gradle just throws the test folder on the classpath, this one resolves to an actual file.
            "classpath:resources-jar/fixtures/app", // This one is a jar generated by Gradle and injected into our classpath. It contains a copy of our resources folder
            "file:src/test/resources/fixtures/empty", // Relative to CWD, which is the project folder
            "oci://registry-1.docker.io/bitnamicharts/nginx", // OCI image without version
            "oci://registry-1.docker.io/bitnamicharts/nginx:20.0.8" // OCI image with version version
    })
    void handleResourceDefaultClassloader(String resource) {

        var chart = HelmChartHandle.builder()
                .helmClient(helm)
                .addChartRepositories(true)
                .chart(resource)
                .isolatedNamespace()
                .build();


        var installation = chart.install();

        assertThat(installation.name()).isNotEmpty();
    }

    @ParameterizedTest
    @CsvSource({
            "classpath:/fixtures/empty", // Reference to resources on our classpath. Because Gradle just throws the test folder on the classpath, this one resolves to an actual file.
            "classpath:empty-chart",
            "classpath:/resources-jar/fixtures/empty", // This one is a jar generated by Gradle and injected into our classpath. It contains a copy of our resources folder
    })
    void handleResourceClassSpecificLoader(String resource) {
        var chart = HelmChartHandle.builder()
                .helmClient(helm)
                .resourceLoaderClass(HelmChartHandleTest.class)
                .chart(resource)
                .isolatedNamespace()
                .build();


        var installation = chart.install();

        assertThat(installation.name()).isNotEmpty();

    }

}